#BlueJ class context
comment0.target=Fill2D
comment0.text=\n\ Practice\ with\ 2D\ arrays\n\ \n\ @author\ (Alexander\ Shapiro)\ \n\ @version\ (12/11/17)\n
comment1.params=
comment1.target=java.lang.String\ yourName()
comment1.text=\n\ Simply\ return\ your\ name\ as\ a\ String.\n\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \n\ @return\ your\ name\ formatted\ as\ "Last,\ First"\ as\ a\ String\n
comment2.params=arr2d\ border\ interior
comment2.target=int[][]\ boxFill(int[][],\ int,\ int)
comment2.text=\n\ Write\ a\ method\ that\ fills\ the\ parameter\ array\ so\ that\ all\ of\ its\n\ border\ elements\ have\ the\ value\ specified\ in\ the\ border\ parameter\n\ and\ its\ interior\ elements\ have\ the\ value\ of\ the\ interior\ parameter.\n\ \n\ The\ border\ is\ defined\ as\ the\ first\ and\ last\ row\ and\ column\n\ The\ interior\ is\ everything\ but\ the\ border\n\ \n\ For\ example,\ given\ the\ array\:\n\ {\n\ \ \ {0,0,0,0},\n\ \ \ {0,0,0,0},\n\ \ \ {0,0,0,0}\n\ }\n\ and\ the\ border\ value\ 5\ and\ interior\ value\ 2\n\ Your\ method\ should\ return\:\n\ {\n\ \ \ \ \ {5,5,5,5},\n\ \ \ \ \ {5,2,2,5},\n\ \ \ \ \ {5,5,5,5}\n\ }\n\ \n\ \n\ @param\ \ \ arr2d\ \ \ \ \ \ \ The\ array\ to\ manipulate\n\ @param\ \ \ border\ \ \ \ \ \ The\ value\ that\ should\ be\ placed\ in\ the\ border\ elements\n\ @param\ \ \ interior\ \ \ \ The\ value\ that\ should\ be\ placed\ in\ the\ interior\ elements\n\ @return\ \ a\ two\ dimensional\ array\ of\ equal\ size\ and\ shape\ as\ the\ parameter\ arr2d\n
comment3.params=arr2d
comment3.target=int[][]\ fill_lToR_rToL(int[][])
comment3.text=\n\ Write\ a\ method\ that\ fills\ the\ parameter\ array\ following\ the\ pattern\:\n\ Even\ rows\ should\ count\ up\ from\ the\ highest\ value\ in\ the\ array\ so\ far\n\ going\ left\ to\ right\ but\ odd\ rows\ should\ go\ from\ right\ to\ left.\n\ For\ example,\ given\ the\ array\:\n\ {\n\ \ \ {0,0,0,0},\n\ \ \ {0,0,0,0},\n\ \ \ {0,0,0,0}\n\ }\n\ Your\ method\ should\ return\:\n\ {\n\ \ \ \ \ {1,2,3,4},\n\ \ \ \ \ {8,7,6,5},\n\ \ \ \ \ {9,10,11,12}\n\ }\n\ @param\ \ \ arr2d\ \ \ \ \ the\ input\ array\n\ @return\ \ a\ two\ dimensional\ array\ of\ equal\ size\ and\ shape\ as\ the\ parameter\ arr2d\n
comment4.params=matrix\ vector
comment4.target=int[]\ multMatrixByVector(int[][],\ int[])
comment4.text=\n\ Write\ a\ method\ that\ multiplies\ a\ matrix\ of\ dimension\ m\ x\ m\ by\ a\ vector\ of\ lengh\ m.\n\ A\ matrix\ is\ represented\ by\ a\ 2\ dimensional\ array\ and\ a\ vector\ is\ represented\ by\ a\ one\ \n\ dimensional\ array.\n\ \n\ HINT\:\ \ You\ will\ need\ to\ create\ a\ new\ array\ of\ length\ m\ to\ return\ the\ final\ result.\n\ \n\ Here\ is\ an\ explanation\ of\ how\ to\ multiply\ a\ matrix\ by\ a\ vector\:\n\ http\://www.varsitytutors.com/hotmath/hotmath_help/topics/multiplying-vector-by-a-matrix\n\ \n\ @param\ \ \ matrix\ \ \ \ \ the\ 2D\ input\ array\n\ @param\ \ \ vector\ \ \ \ \ the\ 1D\ array\ to\ mutliply\ by\n\ @return\ \ an\ array\ of\ equal\ length\ to\ the\ vector\n
comment5.params=matrix1\ matrix2
comment5.target=int[][]\ multMatrixByMatrix(int[][],\ int[][])
comment5.text=\n\ Write\ a\ method\ that\ multiplies\ a\ matrix\ of\ dimension\ m\ x\ m\ by\ a\ another\ matrix\ of\ dimension\ m\ x\ m.\n\ A\ matrix\ is\ represented\ by\ a\ 2\ dimensional\ array\ and\ returned\ product\ of\ the\ multiplication\ is\ another\ matrix\n\ \n\ HINT\:\ \ You\ will\ use\ the\ 2D\ array\ that\ is\ already\ allocated\ in\ the\ code\ below.\n\ \n\ Here\ is\ an\ explanation\ of\ how\ to\ multiply\ a\ matrix\ by\ a\ matrix\:\n\ https\://www.khanacademy.org/math/precalculus/precalc-matrices/multiplying-matrices-by-matrices/v/multiplying-a-matrix-by-a-matrix\n\ \n\ Here\ is\ a\ website\ where\ you\ can\ test\ example\ of\ matrix\ multiplication\ to\ test\ your\ results.\n\ Try\ it\ with\ simple\ 2x2\ matrices\ first\:\n\ http\://www.calcul.com/show/calculator/matrix-multiplication_;3;3;3;3\n\ \n\ @param\ \ \ matrix\ \ \ \ \ the\ 2D\ input\ array\n\ @param\ \ \ vector\ \ \ \ \ the\ 2D\ array\ to\ mutliply\ by\n\ @return\ \ an\ array\ of\ equal\ size\ to\ the\ matrix\n
numComments=6
