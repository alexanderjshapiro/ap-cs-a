#BlueJ class context
comment0.target=ArrayLists
comment0.text=\n\ In\ this\ project\ you\ will\ learn\ to\ use\ the\ ArrayList\ class.\n\ Some\ of\ the\ problems\ below\ are\ ones\ that\ we've\ seen\ in\ the\ past.\ \ Don't\ just\ copy/paste\n\ from\ your\ original\ solution,\ solve\ it\ again\!\ \ It's\ good\ practice.\n\ First\ you\ will\ complete\ each\ method\ using\ an\ array.\ \ \ \n\ Next\ you\ will\ complete\ the\ the\ same\ method\ immediately\ following\ the\ array\ problem\ \n\ except\ this\ time\ you\ will\ use\ an\ ArrayList.\n\ \n\ \n\ @author\ (Alexander\ Shapiro)\ \n\ @version\ Unit\ 6\n
comment1.params=
comment1.target=java.lang.String\ yourName()
comment1.text=\n\ Simply\ return\ your\ name\ as\ a\ String,\ last\ name\ then\ first\ name,\ separated\ by\ a\ comma\n\n\ @return\ your\ name\ as\ a\ String\n
comment10.params=nums\ target
comment10.target=double[]\ replaceAboveTarget(double[],\ double)
comment10.text=\n\ Given\ an\ array\ of\ doubles,\ return\ an\ array\ with\ the\ all\ values\ greater\ than\ target\ changed\ to\ -1.0\n\n\n\ Preconditions\:\ \ \ nums\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nums.length\ >\ 0\n\ Postcondition\:\ You\ may\ change\ the\ nums\ array\ directly.\ \ There\ is\ no\ need\ to\ create\ and\ return\ a\ new\ array\n\n\ @param\ nums\ An\ array\ of\ doubles\n\ @param\ target\ The\ maximimum\ allowable\ value\ in\ the\ array.\ \ \n\ \n\ @return\ a\ new\ array\ of\ doubles\ that\ has\ values\ greater\ than\ target\ changed\ to\ -1.0\n\ \n
comment11.params=nums\ target
comment11.target=java.util.List\ listReplaceAboveTarget(java.util.List,\ java.lang.Double)
comment11.text=\n\ Given\ a\ List\ of\ Doubles,\ return\ a\ List\ with\ the\ all\ values\ greater\ than\ target\ changed\ to\ -1.0\n\n\ Preconditions\:\ \ \ list\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ list.size()\ >\ 0\n\ Postcondition\:\ You\ may\ change\ the\ nums\ List\ directly.\ \ There\ is\ no\ need\ to\ create\ and\ return\ a\ new\ List\n\n\ @param\ nums\ A\ List\ of\ doubles\n\ @param\ target\ The\ maximimum\ allowable\ value\ in\ the\ array.\ \ \n\ \n\ @return\ a\ new\ List\ of\ doubles\ that\ has\ values\ greater\ than\ target\ changed\ to\ -1.0\n\ \n
comment12.params=nums\ target
comment12.target=double[]\ removeBelowTarget(double[],\ double)
comment12.text=\n\ Given\ an\ array\ of\ doubles,\ return\ an\ array\ with\ the\ all\ values\ less\ than\ target\ removed\n\n\ Preconditions\:\ \ \ nums\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ nums.length\ >\ 0\n\ Postcondition\:\ Do\ not\ modify\ the\ contents\ of\ the\ nums\ array.\ \ Create\ and\ return\ a\ new\ array\ \n\n\ @param\ nums\ An\ array\ of\ doubles\n\ @param\ target\ The\ minimum\ allowable\ value\ in\ the\ returned\ array\n\ \n\ @return\ a\ new\ array\ of\ doubles\ that\ has\ values\ less\ than\ target\ removed\n\ \n
comment13.params=nums\ target
comment13.target=java.util.List\ listRemoveBelowTarget(java.util.List,\ java.lang.Double)
comment13.text=\n\ Given\ a\ List\ of\ Doubles,\ return\ an\ array\ with\ the\ all\ values\ less\ than\ target\ removed\n\ Do\ NOT\ create\ a\ new\ List\ to\ return\n\ \n\ Preconditions\:\ \ \ list\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ list.size()\ >\ 0\n\ Postcondition\:\ Do\ not\ create\ a\ new\ List\ to\ return,\ simply\ modify\ the\ nums\ List.\n\n\ @param\ nums\ A\ List\ of\ doubles\n\ @param\ target\ The\ minimum\ allowable\ value\ in\ the\ returned\ List\n\ \n\ @return\ nums\ that\ has\ values\ less\ than\ target\ removed\n\ \n
comment2.params=array\ index
comment2.target=double\ valueSqRoot(double[],\ int)
comment2.text=\n\ Given\ an\ array\ of\ doubles,\ return\ the\ square\ root\ of\ the\ value\ at\ the\ given\ index\n\n\ Preconditions\:\ \ \ array\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ array.length\ >\ 0\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index\ >\=\ 0\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index\ <\ array.length\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ array\n\n\ @param\ array\ An\ array\ of\ doubles\n\ @param\ index\ The\ index\ of\ the\ value\ to\ return\ the\ square\ root\ of\n\ @return\ the\ square\ root\ of\ the\ value\ at\ index\ position\ \n\ \n
comment3.params=list\ index
comment3.target=java.lang.Double\ listValueSqRoot(java.util.List,\ int)
comment3.text=\n\ Given\ a\ List\ of\ Doubles,\ return\ the\ square\ root\ of\ the\ value\ at\ the\ given\ index\n\n\ Preconditions\:\ \ \ list\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ list.size()\ >\ 0\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index\ >\=\ 0\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ index\ <\ list.size()\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ List\n\n\ @param\ list\ ArrayList\ of\ Doubles\n\ @param\ index\ The\ index\ of\ the\ value\ to\ return\ the\ square\ root\ of\n\ @return\ the\ square\ root\ of\ the\ value\ at\ index\ position\ \n\ \n
comment4.params=arr\ index
comment4.target=int\ safeGet(int[],\ int)
comment4.text=\n\ Given\ an\ array\ of\ integer\ values,\ return\ the\ value\ stored\ at\ the\ given\ index\ unless\ \n\ the\ index\ is\ out\ of\ bounds\ in\ which\ case\ return\ -1\ instead.\n\n\ Preconditions\:\ \ \ array\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ array.length\ >\ 0\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ array\ arr\n\n\ @param\ arr\ An\ array\ of\ integers\n\ @param\ index\ The\ index\ of\ the\ value\ to\ return\ the\ value\n\ @return\ the\ value\ at\ the\ index\ position,\ -1\ if\ the\ index\ is\ out\ of\ bounds\ of\ the\ array\n\ \n
comment5.params=list\ index
comment5.target=java.lang.Integer\ listSafeGet(java.util.List,\ int)
comment5.text=\n\ Given\ a\ List\ of\ Integer\ values,\ return\ the\ value\ stored\ at\ the\ given\ index\ unless\ \n\ the\ index\ is\ out\ of\ bounds\ in\ which\ case\ return\ -1\ instead.\n\ \n\ Preconditions\:\ \ \ list\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ list.size()\ >\ 0\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ List\n\ \n\ @param\ list\ A\ List\ of\ Integers\n\ @param\ index\ The\ index\ of\ the\ value\ to\ return\ the\ value\n\ @return\ the\ value\ at\ the\ index\ position,\ -1\ if\ the\ index\ is\ out\ of\ bounds\ of\ the\ array\n\ \n
comment6.params=array
comment6.target=double\ avgArray(int[])
comment6.text=\n\ Given\ an\ array\ of\ integer\ values,\ return\ the\ average\ of\ all\ values\ in\ the\ array\n\n\ Preconditions\:\ \ \ array\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ array.length\ >\ 0\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ array\n\n\ @param\ array\ An\ array\ of\ integers\n\ @return\ the\ avarage\ of\ all\ values\ in\ the\ array\n\ \n
comment7.params=list
comment7.target=java.lang.Double\ avgList(java.util.List)
comment7.text=\n\ Given\ a\ List\ of\ Integer\ values,\ return\ the\ avarage\ of\ all\ values\ in\ the\ List\n\n\ Preconditions\:\ \ \ list\ is\ not\ null\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ list.size()\ >\ 0\n\ Postcondition\:\ Do\ not\ modify\ the\ values\ in\ the\ List\n\n\ @param\ List\ of\ Integers\n\ @return\ the\ average\ of\ all\ values\ in\ the\ List\n\ \n
comment8.params=firstNumber\ count
comment8.target=int[]\ byTwoArray(int,\ int)
comment8.text=\n\ Given\ a\ starting\ number,\ return\ an\ array\ of\ integers\ starting\ with\ the\ first\ number.\n\ The\ array\ will\ consist\ of\ the\ number\ of\ elements\ specified\ by\ "count".\ \n\ The\ first\ element\ of\ the\ array\ is\ firstNumber\ and\ each\ subsequent\ number\ counts\ up\ by\ 2.\n\n\ Example\:\n\ for\ parameter\ values\n\ \ firstnumber\ \:\ 3\n\ \ count\ \:\ 4\n\ \ the\ return\ array\ should\ be\ {\ 3,\ 5,\ 7,\ 9\ }\n\ \ \n\n\ Precondition\:\ none\n\ Postcondition\:\ none\n\n\ @param\ firstNumber\ The\ value\ of\ the\ first\ element\ of\ the\ returned\ array\n\ @param\ count\ The\ number\ of\ elements\ to\ include\ in\ the\ returned\ array\n\ @return\ the\ array\ of\ count\ elements,\ starting\ with\ firstNumber\ and\ counting\ up\ by\ 2\n\ \n
comment9.params=firstNumber\ count
comment9.target=java.util.List\ byTwoList(int,\ int)
comment9.text=\n\ Given\ a\ starting\ number,\ return\ a\ List\ of\ Integers\ starting\ with\ the\ first\ number.\n\ The\ List\ will\ consist\ of\ the\ number\ of\ elements\ specified\ by\ "count".\ \n\ The\ first\ element\ of\ the\ List\ is\ firstNumber\ and\ each\ subsequent\ number\ counts\ up\ by\ 2.\n\ \n\ Example\:\n\ for\ parameter\ values\n\ \ firstnumber\ \:\ 3\n\ \ count\ \:\ 4\n\ \ the\ return\ List\ should\ be\ {\ 3,\ 5,\ 7,\ 9\ }\n\ \n\ Precondition\:\ none\n\ Postcondition\:\ none\n\ \n\ @param\ firstNumber\ The\ value\ of\ the\ first\ element\ of\ the\ returned\ List\n\ @param\ count\ The\ number\ of\ elements\ to\ include\ in\ the\ returned\ List\n\ @return\ the\ List\ of\ count\ elements,\ starting\ with\ firstNumber\ and\ counting\ up\ by\ 2\n\ \n
numComments=14
