#BlueJ class context
comment0.target=ExamMethods
comment0.text=\n\ Read\ the\ directions\ and\ comments\ carefully\ so\ that\ you\ may\ implement\ each\ method\ correctly.\n\n\n\ COMPLETE\ THE\ "yourName"\ METHOD\ FIRST\!\n\n\n\ @author\ Alexander\ Shapiro\n\ @version\ Units\ 1-4\n
comment1.params=
comment1.target=java.lang.String\ yourName()
comment1.text=\n\ \n\ \ \ 20\ Points\n\ \n\ Simply\ return\ your\ name\ as\ a\ String,\ last\ name\ then\ first\ name,\ separated\ by\ a\ comma\n\n\ @return\ your\ name\ as\ a\ String\n
comment2.params=username
comment2.target=java.lang.String\ emailUser(java.lang.String)
comment2.text=\n\ \n\ \ \ 25\ Points\n\ \n\ An\ email\ address\ has\ the\ format\ username@domain\n\ Given\ an\ email\ address\ return\ the\ username\ portion\ of\ the\ String.\ \ In\ other\ words,\ return\n\ the\ part\ of\ the\ string\ that\ comes\ before\ the\ '@'\ character.\n\n\ @param\ email\ address\ with\ format\ username@domain\n\ @return\ the\ username\ portion\ of\ the\ address.\n
comment3.params=array\ testValue
comment3.target=boolean\ valueIsBetweenRange(int[],\ int)
comment3.text=\n\ \n\ \ \ 25\ Points\n\ \n\ Given\ an\ int\ array\ of\ length\ 2,\ return\ true\ if\ the\ testValue\ is\ between\ the\ range\ of\ the\ two\n\ numbers.\ \ \ You\ can\ assume\ that\ the\ first\ value\ in\ the\ array\ is\ less\ than\ the\ 2nd\ value\ in\n\ the\ array\n\n\ Precondition\:\ \ \ \ array.length\ is\ 2\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ first\ item\ in\ the\ array\ is\ less\ than\ the\ 2nd\ item\ in\ the\ array\n\ Postcondition\:\ \ \ do\ not\ modify\ the\ contents\ of\ array\n\n\ @param\ \ \ array\ of\ integer\ values\ of\ length\ 2\n\ @param\ \ \ testValue\ the\ value\ to\ determine\ whether\ or\ not\ it\ is\ between\ the\ 2\ array\ values\n\ @return\ \ A\ boolean\ indicating\ whether\ testValue\ is\ between\ the\ two\ array\ values\ or\ not.\n
comment4.params=x1\ y1\ x2\ y2
comment4.target=double\ distance(int,\ int,\ int,\ int)
comment4.text=\n\ \n\ \ \ 20\ Points\n\ \n\ Given\ the\ x\ and\ y\ coodinates\ of\ two\ points,\ call\ the\ distance\ method\ that\ has\n\ been\ provided\ for\ you\ to\ calcuate\ and\ return\ the\ distance\ between\ the\ points.\n\ You\ are\ given\ the\ points\ as\ individual\ variable\ values.\n\n\ The\ distance\ method\ is\ already\ implemented\ below,\ all\ that\ you\ need\ to\ do\ is\ call\ the\n\ existing\ method.\ \ \ You\ MUST\ call\ that\ method\ to\ receive\ credit\ for\ this\ problem.\n\ Here\ is\ the\ header\ definition\ for\ the\ method\ that\ you\ will\ call\:\n\n\ \ \ double\ distance(int[]\ point1,\ int[]\ point2)\n\n\ The\ distance\ method\ requires\n\ that\ the\ point\ parameters\ are\ provided\ as\ arrays\ where\ the\ item\ as\ index\ 0\ is\ the\ x\n\ coordinate\ and\ the\ item\ at\ index\ 1\ is\ the\ y\ coordinate.\n\ Your\ task\ should\ be\ as\ follows\:\n\ \ 1)\ convert\ the\ variables\ that\ you\ were\ provided\ into\ 2\ arrays\ of\ length\ 2.\n\ \ \ \ \ \ Each\ array\ represents\ one\ point\n\ \ 2)\ call\ the\ distance\ method\ below\ to\ find\ the\ distance\ between\ the\ two\ points\n\ \ 3)\ return\ the\ resulting\ distance\n\n\ @param\ \ \ x1\ the\ x\ coordinate\ of\ point\ 1\n\ @param\ \ \ y1\ the\ x\ coordinate\ of\ point\ 1\n\ @param\ \ \ x2\ the\ x\ coordinate\ of\ point\ 2\n\ @param\ \ \ y2\ the\ x\ coordinate\ of\ point\ 2\n\ @return\ \ the\ distance\ between\ (x1,\ y1)\ and\ (x2,\ y2)\n
comment5.params=points
comment5.target=double[]\ allDistances(int[][])
comment5.text=\n\ \n\ \ \ 10\ Points\n\ \n\ You\ are\ given\ a\ 2\ dimensional\ array\ of\ points.\n\ Each\ row\ represents\ one\ point\ in\ the\ format\ [x,\ y]\n\ You\ will\ calculate\ the\ distance\ between\ each\ point\ and\ the\ next\ point\ in\ the\ array\n\ and\ return\ a\ 1\ dimensional\ array\ containing\ the\ distances\ between\ each\n\ For\ example,\ point0\ is\ row\ 0\ and\ point1\ is\ row1\ from\ your\ input\ array.\n\ In\ the\ array\ that\ you\ return,\ the\ element\ at\ position\ 0\ will\ store\ the\n\ distance\ between\ point0\ and\ point1.\n\n\ If\ your\ input\ array\ has\ n\ rows,\ your\ output\ array\ will\ have\ n-1\ rows.\n\n\ You\ may\ either\ call\ your\ working\ distance\ method\ above\ OR\ the\ one\ that\ I\ have\ provided\n\ you\ below.\n\n\ @param\ \ \ points\ is\ a\ 2\ dimensional\ array\ of\ points\ each\ with\ the\ format\ [x,\ y]\n\ @return\ \ an\ array\ specifying\ the\ distance\ between\ each\ subsequent\ row.\ \ This\ array's\n\ \ \ \ \ \ \ \ \ \ length\ is\ one\ less\ than\ the\ number\ of\ rows\ in\ the\ input\ array.\n
comment6.params=array
comment6.target=int\ columnContainingLargest(double[][])
comment6.text=\n\n\ \ 5\ Points\ Extra\ Credit\n\n\ Given\ a\ 2\ dimensional\ array.\ \ Return\ the\ index\ of\ the\ column\ containing\ the\ largest\ value\n\n\ Postcondition\:\ \ \ do\ not\ modify\ the\ contents\ of\ array\n\n\ @param\ \ \ array\ is\ a\ 2\ dimensional\ array\n\ @return\ \ an\ integer\ representing\ the\ index\ of\ the\ column\ that\ contains\ the\ largest\ value\n
comment7.params=point1\ point2
comment7.target=double\ distance(int[],\ int[])
comment7.text=\n\ DO\ NOT\ EDIT\ THIS\ METHOD,\ it\ is\ used\ for\ the\ problem\ above.\n\ Calculates\ the\ distance\ between\ 2\ points\n\n\ @param\ \ \ point1\ is\ the\ x\ and\ y\ coordinates\ of\ a\ point\ stored\ in\ an\ array\n\ @param\ \ \ point2\ is\ the\ x\ and\ y\ coordinates\ of\ a\ point\ stored\ in\ an\ array\n\ @return\ \ the\ distance\ between\ point1\ and\ point2\n
numComments=8
